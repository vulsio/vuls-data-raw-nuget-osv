{
	"schema_version": "1.6.0",
	"id": "GHSA-cxw4-9qv9-vx5h",
	"modified": "2024-12-02T05:44:04.579563Z",
	"published": "2019-09-30T19:42:28Z",
	"summary": "High severity vulnerability that affects PeterO.Cbor",
	"details": "### Impact\nThe CBOR library supports optional tags that enable CBOR objects to contain references to objects within them. Versions earlier than 4.0 resolved those references automatically. While this by itself doesn't cause much of a security problem, a denial of service can happen if those references are deeply nested and used multiple times (so that the same reference to the same object occurs multiple times), and if the decoded CBOR object is sent to a serialization method such as `EncodeToBytes`, `ToString`, or `ToJSONString`, since the objects referred to are expanded in the process and take up orders of magnitude more memory than if the references weren't resolved.\n\nThe impact of this problem on any particular system varies.  In general, the risk is higher if the system allows users to send arbitrary CBOR objects without authentication, or exposes a remote endpoint in which arbitrary CBOR objects can be sent without authentication.\n\n### Patches\nThis problem is addressed in version 4.0 by disabling reference resolution by default.  Users should use the latest version of this library.\n\n### Workarounds\nSince version 3.6, an encoding option (`resolvereferences=true` or `resolvereferences=false`) in CBOREncodeOptions sets whether the CBOR processor will resolve these kinds of references when decoding a CBOR object.  Set `resolvereferences=false` to disable reference resolution.\n\nIn version 3.6, if the method used `CBORObject.Read()` or `CBORObject.DecodeFromBytes()` to decode a serialized CBOR object, call the overload that takes `CBOREncodeOptions` as follows:\n\n    CBORObject.DecodeFromBytes(bytes, new CBOREncodeOptions(\"resolvereferences=false\"));\n\nIn versions 3.5 and earlier, this issue is present only if the CBOR object is an array or a map.  If the application does not expect a decoded CBOR object to be an array or a map, it should check the CBOR object's type before encoding that object, as follows:\n\n    if (cbor.Type != CBORType.Array && cbor.Type != CBORType.Map) {\n       cbor.EncodeToBytes();\n    }\n\nAlternatively, for such versions, the application can use `WriteTo` to decode the CBOR object to a so-called \"limited memory stream\", that is, a `Stream` that throws an exception if too many bytes would be written.  How to write such a limited-memory stream is nontrivial and beyond the scope of this advisory.\n\n    using(var stream = new LimitedMemoryStream(100000)) { // Limit to 100000 bytes\n         cbor.WriteTo(stream);\n         return stream.ToBytes();\n    }\n\nTo check whether a byte array representing a CBOR object might exhibit this problem, check whether the array contains the byte 0xd8 followed immediately by either 0x19 or 0x1d.  This check catches all affected CBOR objects but may catch some non-affected CBOR objects (notably integers and byte strings).\n\n### References\n\nSee the Wikipedia article [Billion laughs attack](https://en.wikipedia.org/wiki/Billion_laughs_attack) and the related issue in [Kubernetes](https://github.com/kubernetes/kubernetes/issues/83253).\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the CBOR repository](https://github.com/peteroupc/CBOR).\n",
	"affected": [
		{
			"package": {
				"ecosystem": "NuGet",
				"name": "PeterO.Cbor",
				"purl": "pkg:nuget/PeterO.Cbor"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "4.0.0"
						}
					]
				}
			],
			"versions": [
				"0.21.0",
				"0.22.0",
				"0.23.0",
				"1.0.0",
				"1.1.0",
				"1.2.0",
				"1.3.0",
				"2.0.0",
				"2.1.0",
				"2.2.0",
				"2.3.0",
				"2.3.1",
				"2.4.0",
				"2.4.1",
				"2.4.2",
				"2.5.0",
				"2.5.1",
				"2.5.2",
				"3.0.0",
				"3.0.1",
				"3.0.2",
				"3.0.3",
				"3.1.0",
				"3.2.0",
				"3.2.1",
				"3.3.0",
				"3.4.0",
				"3.4.0-alpha1",
				"3.4.0-beta1",
				"3.5.0",
				"3.5.1",
				"3.5.2",
				"3.6.0",
				"4.0.0-alpha1",
				"4.0.0-alpha2",
				"4.0.0-beta1",
				"4.0.0-beta2"
			],
			"database_specific": {
				"source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2019/09/GHSA-cxw4-9qv9-vx5h/GHSA-cxw4-9qv9-vx5h.json"
			}
		}
	],
	"references": [
		{
			"type": "WEB",
			"url": "https://github.com/peteroupc/CBOR/security/advisories/GHSA-cxw4-9qv9-vx5h"
		},
		{
			"type": "PACKAGE",
			"url": "https://github.com/peteroupc/CBOR"
		}
	],
	"database_specific": {
		"cwe_ids": [],
		"github_reviewed": true,
		"github_reviewed_at": "2020-06-16T21:33:21Z",
		"nvd_published_at": null,
		"severity": "HIGH"
	}
}
